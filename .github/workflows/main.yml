#include <stdio.h>
#include <stdlib.h>

#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBIE -1
#define OVERFLOW -2

#define LIST_INIT_SIZE 100//线性表存储空间的初始分配量
#define LISTINCREMENT 10//线性表存储空间的分配增量

typedef int Status;
typedef int ElemType;


typedef struct {//定义顺序表的结构体
	ElemType* elem; //存储元素的动态数组
	int length;//当前长度
	int listsize;//当前分配的存储容量
}SqList;

void InitList(SqList& L)//初始化线性表,为线性表分配空间
{
	L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType));
	if (!L.elem)
		exit(OVERFLOW);//分配失败则退出
	L.length = 0;
	L.listsize = LIST_INIT_SIZE;
}

Status MergeList(SqList La, SqList Lb, SqList& Lc)
{
	Lc.elem = (ElemType*)malloc((La.length + Lb.length) * sizeof(ElemType));
	if (!Lc.elem)
		exit(OVERFLOW);
	//为Lc分配足够的空间

	ElemType a=0, b=0,c=0;//用来指向La，Lb,Lc的元素位置
	while (a < La.length && b < Lb.length)
	{


		if (La.elem[a] < Lb.elem[b])//对La，Lb里的元素进行有序排列后放入Lc
		{
			Lc.elem[c] = La.elem[a];
			c++;
			a++;
		}
		else
		{
			Lc.elem[c] = Lb.elem[b];
			c++;
			b++;
		}
	}


		//当La或Lb其中一方提前复制完后
		//复制剩下的元素
		while (a < La.length)
		{
			Lc.elem[c] = La.elem[a];
			c++;
			a++;
		}
		while (b < Lb.length)
		{
			Lc.elem[c] = Lb.elem[b];
			c++;
			b++;
		}
	
	Lc.length = c;//更新Lc的长度
	Lc.listsize = c;//更新Lc的存储容量

	return OK;
}

int main()
{
	SqList La, Lb, Lc;

	InitList(La);
	InitList(Lb);

	// 为La和Lb赋值
	La.elem[0] = 1;
	La.elem[1] = 3;
	La.elem[2] = 5;
	La.length = 3;

	Lb.elem[0] = 2;
	Lb.elem[1] = 4;
	Lb.elem[2] = 6;
	Lb.elem[3] = 9;
	Lb.length = 4;

	if (MergeList(La, Lb, Lc) == OK)
	{
		printf("Merged List: ");
		for (int i = 0; i < Lc.length; i++)
		{
			printf("%d ", Lc.elem[i]);
		}
		printf("\n");
	}
	else
	{
		printf("Merge failed.\n");
	}

	// 释放内存
	free(La.elem);
	free(Lb.elem);
	free(Lc.elem);

	return 0;
}
